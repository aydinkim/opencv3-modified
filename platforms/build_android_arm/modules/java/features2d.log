ok: CLASS ..Features2d : 


===== Header: /home/aydinkim/clab/opencv-3.0.0-android/modules/features2d/misc/java/src/cpp/features2d_manual.hpp =====
Namespaces: set([u'cv'])

--- Incoming ---
[u'class cv.javaFeatureDetector', '', [u'=FeatureDetector'], []]
ok: CLASS cv..javaFeatureDetector : 

--- Incoming ---
[   u'cv.javaFeatureDetector.detect',
    u'void',
    [],
    [   [u'Mat', u'image', u'', []],
        [u'vector_KeyPoint', u'keypoints', u'', ['/O']],
        [u'Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv.javaFeatureDetector.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.javaFeatureDetector.detect',
    u'void',
    [],
    [   [u'vector_Mat', u'images', u'', []],
        [u'vector_vector_KeyPoint', u'keypoints', u'', ['/O']],
        [u'vector_Mat', u'masks', u'std::vector<Mat>()', []]],
    u'void']
ok: FUNC <void cv.javaFeatureDetector.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=std::vector<Mat>()]>

--- Incoming ---
[u'cv.javaFeatureDetector.empty', u'bool', [], [], u'bool']
ok: FUNC <bool cv.javaFeatureDetector.empty []>

--- Incoming ---
[u'const cv.javaFeatureDetector.FAST', u'1', [], []]
ok: CONST FAST=1

--- Incoming ---
[u'const cv.javaFeatureDetector.STAR', u'2', [], []]
ok: CONST STAR=2

--- Incoming ---
[u'const cv.javaFeatureDetector.SIFT', u'3', [], []]
ok: CONST SIFT=3

--- Incoming ---
[u'const cv.javaFeatureDetector.SURF', u'4', [], []]
ok: CONST SURF=4

--- Incoming ---
[u'const cv.javaFeatureDetector.ORB', u'5', [], []]
ok: CONST ORB=5

--- Incoming ---
[u'const cv.javaFeatureDetector.MSER', u'6', [], []]
ok: CONST MSER=6

--- Incoming ---
[u'const cv.javaFeatureDetector.GFTT', u'7', [], []]
ok: CONST GFTT=7

--- Incoming ---
[u'const cv.javaFeatureDetector.HARRIS', u'8', [], []]
ok: CONST HARRIS=8

--- Incoming ---
[u'const cv.javaFeatureDetector.SIMPLEBLOB', u'9', [], []]
ok: CONST SIMPLEBLOB=9

--- Incoming ---
[u'const cv.javaFeatureDetector.DENSE', u'10', [], []]
ok: CONST DENSE=10

--- Incoming ---
[u'const cv.javaFeatureDetector.BRISK', u'11', [], []]
ok: CONST BRISK=11

--- Incoming ---
[u'const cv.javaFeatureDetector.AKAZE', u'12', [], []]
ok: CONST AKAZE=12

--- Incoming ---
[u'const cv.javaFeatureDetector.GRIDDETECTOR', u'1000', [], []]
ok: CONST GRIDDETECTOR=1000

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_FAST', u'GRIDDETECTOR + FAST', [], []]
ok: CONST GRID_FAST=GRIDDETECTOR + FAST

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_STAR', u'GRIDDETECTOR + STAR', [], []]
ok: CONST GRID_STAR=GRIDDETECTOR + STAR

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_SIFT', u'GRIDDETECTOR + SIFT', [], []]
ok: CONST GRID_SIFT=GRIDDETECTOR + SIFT

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_SURF', u'GRIDDETECTOR + SURF', [], []]
ok: CONST GRID_SURF=GRIDDETECTOR + SURF

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_ORB', u'GRIDDETECTOR + ORB', [], []]
ok: CONST GRID_ORB=GRIDDETECTOR + ORB

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_MSER', u'GRIDDETECTOR + MSER', [], []]
ok: CONST GRID_MSER=GRIDDETECTOR + MSER

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_GFTT', u'GRIDDETECTOR + GFTT', [], []]
ok: CONST GRID_GFTT=GRIDDETECTOR + GFTT

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_HARRIS', u'GRIDDETECTOR + HARRIS', [], []]
ok: CONST GRID_HARRIS=GRIDDETECTOR + HARRIS

--- Incoming ---
[   u'const cv.javaFeatureDetector.GRID_SIMPLEBLOB',
    u'GRIDDETECTOR + SIMPLEBLOB',
    [],
    []]
ok: CONST GRID_SIMPLEBLOB=GRIDDETECTOR + SIMPLEBLOB

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_DENSE', u'GRIDDETECTOR + DENSE', [], []]
ok: CONST GRID_DENSE=GRIDDETECTOR + DENSE

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_BRISK', u'GRIDDETECTOR + BRISK', [], []]
ok: CONST GRID_BRISK=GRIDDETECTOR + BRISK

--- Incoming ---
[u'const cv.javaFeatureDetector.GRID_AKAZE', u'GRIDDETECTOR + AKAZE', [], []]
ok: CONST GRID_AKAZE=GRIDDETECTOR + AKAZE

--- Incoming ---
[u'const cv.javaFeatureDetector.PYRAMIDDETECTOR', u'2000', [], []]
ok: CONST PYRAMIDDETECTOR=2000

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_FAST',
    u'PYRAMIDDETECTOR + FAST',
    [],
    []]
ok: CONST PYRAMID_FAST=PYRAMIDDETECTOR + FAST

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_STAR',
    u'PYRAMIDDETECTOR + STAR',
    [],
    []]
ok: CONST PYRAMID_STAR=PYRAMIDDETECTOR + STAR

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_SIFT',
    u'PYRAMIDDETECTOR + SIFT',
    [],
    []]
ok: CONST PYRAMID_SIFT=PYRAMIDDETECTOR + SIFT

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_SURF',
    u'PYRAMIDDETECTOR + SURF',
    [],
    []]
ok: CONST PYRAMID_SURF=PYRAMIDDETECTOR + SURF

--- Incoming ---
[u'const cv.javaFeatureDetector.PYRAMID_ORB', u'PYRAMIDDETECTOR + ORB', [], []]
ok: CONST PYRAMID_ORB=PYRAMIDDETECTOR + ORB

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_MSER',
    u'PYRAMIDDETECTOR + MSER',
    [],
    []]
ok: CONST PYRAMID_MSER=PYRAMIDDETECTOR + MSER

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_GFTT',
    u'PYRAMIDDETECTOR + GFTT',
    [],
    []]
ok: CONST PYRAMID_GFTT=PYRAMIDDETECTOR + GFTT

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_HARRIS',
    u'PYRAMIDDETECTOR + HARRIS',
    [],
    []]
ok: CONST PYRAMID_HARRIS=PYRAMIDDETECTOR + HARRIS

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_SIMPLEBLOB',
    u'PYRAMIDDETECTOR + SIMPLEBLOB',
    [],
    []]
ok: CONST PYRAMID_SIMPLEBLOB=PYRAMIDDETECTOR + SIMPLEBLOB

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_DENSE',
    u'PYRAMIDDETECTOR + DENSE',
    [],
    []]
ok: CONST PYRAMID_DENSE=PYRAMIDDETECTOR + DENSE

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_BRISK',
    u'PYRAMIDDETECTOR + BRISK',
    [],
    []]
ok: CONST PYRAMID_BRISK=PYRAMIDDETECTOR + BRISK

--- Incoming ---
[   u'const cv.javaFeatureDetector.PYRAMID_AKAZE',
    u'PYRAMIDDETECTOR + AKAZE',
    [],
    []]
ok: CONST PYRAMID_AKAZE=PYRAMIDDETECTOR + AKAZE

--- Incoming ---
[u'const cv.javaFeatureDetector.DYNAMICDETECTOR', u'3000', [], []]
ok: CONST DYNAMICDETECTOR=3000

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_FAST',
    u'DYNAMICDETECTOR + FAST',
    [],
    []]
ok: CONST DYNAMIC_FAST=DYNAMICDETECTOR + FAST

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_STAR',
    u'DYNAMICDETECTOR + STAR',
    [],
    []]
ok: CONST DYNAMIC_STAR=DYNAMICDETECTOR + STAR

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_SIFT',
    u'DYNAMICDETECTOR + SIFT',
    [],
    []]
ok: CONST DYNAMIC_SIFT=DYNAMICDETECTOR + SIFT

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_SURF',
    u'DYNAMICDETECTOR + SURF',
    [],
    []]
ok: CONST DYNAMIC_SURF=DYNAMICDETECTOR + SURF

--- Incoming ---
[u'const cv.javaFeatureDetector.DYNAMIC_ORB', u'DYNAMICDETECTOR + ORB', [], []]
ok: CONST DYNAMIC_ORB=DYNAMICDETECTOR + ORB

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_MSER',
    u'DYNAMICDETECTOR + MSER',
    [],
    []]
ok: CONST DYNAMIC_MSER=DYNAMICDETECTOR + MSER

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_GFTT',
    u'DYNAMICDETECTOR + GFTT',
    [],
    []]
ok: CONST DYNAMIC_GFTT=DYNAMICDETECTOR + GFTT

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_HARRIS',
    u'DYNAMICDETECTOR + HARRIS',
    [],
    []]
ok: CONST DYNAMIC_HARRIS=DYNAMICDETECTOR + HARRIS

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_SIMPLEBLOB',
    u'DYNAMICDETECTOR + SIMPLEBLOB',
    [],
    []]
ok: CONST DYNAMIC_SIMPLEBLOB=DYNAMICDETECTOR + SIMPLEBLOB

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_DENSE',
    u'DYNAMICDETECTOR + DENSE',
    [],
    []]
ok: CONST DYNAMIC_DENSE=DYNAMICDETECTOR + DENSE

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_BRISK',
    u'DYNAMICDETECTOR + BRISK',
    [],
    []]
ok: CONST DYNAMIC_BRISK=DYNAMICDETECTOR + BRISK

--- Incoming ---
[   u'const cv.javaFeatureDetector.DYNAMIC_AKAZE',
    u'DYNAMICDETECTOR + AKAZE',
    [],
    []]
ok: CONST DYNAMIC_AKAZE=DYNAMICDETECTOR + AKAZE

--- Incoming ---
[   u'cv.javaFeatureDetector.create',
    u'javaFeatureDetector*',
    ['/S'],
    [[u'int', u'detectorType', u'', []]],
    u'javaFeatureDetector*']
ok: FUNC <javaFeatureDetector* cv.javaFeatureDetector.create [ARG int detectorType=]>

--- Incoming ---
[   u'cv.javaFeatureDetector.write',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaFeatureDetector.write [ARG String fileName=]>

--- Incoming ---
[   u'cv.javaFeatureDetector.read',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaFeatureDetector.read [ARG String fileName=]>

--- Incoming ---
[u'class cv.javaDescriptorMatcher', '', [u'=DescriptorMatcher'], []]
ok: CLASS cv..javaDescriptorMatcher : 

--- Incoming ---
[u'cv.javaDescriptorMatcher.isMaskSupported', u'bool', [], [], u'bool']
ok: FUNC <bool cv.javaDescriptorMatcher.isMaskSupported []>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.add',
    u'void',
    [],
    [[u'vector_Mat', u'descriptors', u'', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorMatcher.add [ARG vector_Mat descriptors=]>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.getTrainDescriptors',
    u'vector_Mat',
    [],
    [],
    u'std::vector<Mat>']
ok: FUNC <vector_Mat cv.javaDescriptorMatcher.getTrainDescriptors []>

--- Incoming ---
[u'cv.javaDescriptorMatcher.clear', u'void', [], [], u'void']
ok: FUNC <void cv.javaDescriptorMatcher.clear []>

--- Incoming ---
[u'cv.javaDescriptorMatcher.empty', u'bool', [], [], u'bool']
ok: FUNC <bool cv.javaDescriptorMatcher.empty []>

--- Incoming ---
[u'cv.javaDescriptorMatcher.train', u'void', [], [], u'void']
ok: FUNC <void cv.javaDescriptorMatcher.train []>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.match',
    u'void',
    [],
    [   [u'Mat', u'queryDescriptors', u'', []],
        [u'Mat', u'trainDescriptors', u'', []],
        [u'vector_DMatch', u'matches', u'', ['/O']],
        [u'Mat', u'mask', u'Mat()', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorMatcher.match [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_DMatch matches=, ARG Mat mask=Mat()]>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.knnMatch',
    u'void',
    [],
    [   [u'Mat', u'queryDescriptors', u'', []],
        [u'Mat', u'trainDescriptors', u'', []],
        [u'vector_vector_DMatch', u'matches', u'', ['/O']],
        [u'int', u'k', u'', []],
        [u'Mat', u'mask', u'Mat()', []],
        [u'bool', u'compactResult', u'false', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG Mat mask=Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.radiusMatch',
    u'void',
    [],
    [   [u'Mat', u'queryDescriptors', u'', []],
        [u'Mat', u'trainDescriptors', u'', []],
        [u'vector_vector_DMatch', u'matches', u'', ['/O']],
        [u'float', u'maxDistance', u'', []],
        [u'Mat', u'mask', u'Mat()', []],
        [u'bool', u'compactResult', u'false', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG Mat mask=Mat(), ARG bool compactResult=false]>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.match',
    u'void',
    [],
    [   [u'Mat', u'queryDescriptors', u'', []],
        [u'vector_DMatch', u'matches', u'', ['/O']],
        [u'vector_Mat', u'masks', u'std::vector<Mat>()', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorMatcher.match [ARG Mat queryDescriptors=, ARG vector_DMatch matches=, ARG vector_Mat masks=std::vector<Mat>()]>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.knnMatch',
    u'void',
    [],
    [   [u'Mat', u'queryDescriptors', u'', []],
        [u'vector_vector_DMatch', u'matches', u'', ['/O']],
        [u'int', u'k', u'', []],
        [u'vector_Mat', u'masks', u'std::vector<Mat>()', []],
        [u'bool', u'compactResult', u'false', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG vector_Mat masks=std::vector<Mat>(), ARG bool compactResult=false]>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.radiusMatch',
    u'void',
    [],
    [   [u'Mat', u'queryDescriptors', u'', []],
        [u'vector_vector_DMatch', u'matches', u'', ['/O']],
        [u'float', u'maxDistance', u'', []],
        [u'vector_Mat', u'masks', u'std::vector<Mat>()', []],
        [u'bool', u'compactResult', u'false', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG vector_Mat masks=std::vector<Mat>(), ARG bool compactResult=false]>

--- Incoming ---
[u'const cv.javaDescriptorMatcher.FLANNBASED', u'1', [], []]
ok: CONST FLANNBASED=1

--- Incoming ---
[u'const cv.javaDescriptorMatcher.BRUTEFORCE', u'2', [], []]
ok: CONST BRUTEFORCE=2

--- Incoming ---
[u'const cv.javaDescriptorMatcher.BRUTEFORCE_L1', u'3', [], []]
ok: CONST BRUTEFORCE_L1=3

--- Incoming ---
[u'const cv.javaDescriptorMatcher.BRUTEFORCE_HAMMING', u'4', [], []]
ok: CONST BRUTEFORCE_HAMMING=4

--- Incoming ---
[u'const cv.javaDescriptorMatcher.BRUTEFORCE_HAMMINGLUT', u'5', [], []]
ok: CONST BRUTEFORCE_HAMMINGLUT=5

--- Incoming ---
[u'const cv.javaDescriptorMatcher.BRUTEFORCE_SL2', u'6', [], []]
ok: CONST BRUTEFORCE_SL2=6

--- Incoming ---
[   u'cv.javaDescriptorMatcher.jclone',
    u'javaDescriptorMatcher*',
    [u'=clone'],
    [[u'bool', u'emptyTrainData', u'false', []]],
    u'javaDescriptorMatcher*']
ok: FUNC <javaDescriptorMatcher* cv.javaDescriptorMatcher.jclone [ARG bool emptyTrainData=false]>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.create',
    u'javaDescriptorMatcher*',
    ['/S'],
    [[u'int', u'matcherType', u'', []]],
    u'javaDescriptorMatcher*']
ok: FUNC <javaDescriptorMatcher* cv.javaDescriptorMatcher.create [ARG int matcherType=]>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.write',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorMatcher.write [ARG String fileName=]>

--- Incoming ---
[   u'cv.javaDescriptorMatcher.read',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorMatcher.read [ARG String fileName=]>

--- Incoming ---
[u'class cv.javaDescriptorExtractor', '', [u'=DescriptorExtractor'], []]
ok: CLASS cv..javaDescriptorExtractor : 

--- Incoming ---
[   u'cv.javaDescriptorExtractor.compute',
    u'void',
    [],
    [   [u'Mat', u'image', u'', []],
        [u'vector_KeyPoint', u'keypoints', u'', ['/IO']],
        [u'Mat', u'descriptors', u'', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorExtractor.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>

--- Incoming ---
[   u'cv.javaDescriptorExtractor.compute',
    u'void',
    [],
    [   [u'vector_Mat', u'images', u'', []],
        [u'vector_vector_KeyPoint', u'keypoints', u'', ['/IO']],
        [u'vector_Mat', u'descriptors', u'', ['/O']]],
    u'void']
ok: FUNC <void cv.javaDescriptorExtractor.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>

--- Incoming ---
[u'cv.javaDescriptorExtractor.descriptorSize', u'int', [], [], u'int']
ok: FUNC <int cv.javaDescriptorExtractor.descriptorSize []>

--- Incoming ---
[u'cv.javaDescriptorExtractor.descriptorType', u'int', [], [], u'int']
ok: FUNC <int cv.javaDescriptorExtractor.descriptorType []>

--- Incoming ---
[u'cv.javaDescriptorExtractor.empty', u'bool', [], [], u'bool']
ok: FUNC <bool cv.javaDescriptorExtractor.empty []>

--- Incoming ---
[u'const cv.javaDescriptorExtractor.SIFT', u'1', [], []]
ok: CONST SIFT=1

--- Incoming ---
[u'const cv.javaDescriptorExtractor.SURF', u'2', [], []]
ok: CONST SURF=2

--- Incoming ---
[u'const cv.javaDescriptorExtractor.ORB', u'3', [], []]
ok: CONST ORB=3

--- Incoming ---
[u'const cv.javaDescriptorExtractor.BRIEF', u'4', [], []]
ok: CONST BRIEF=4

--- Incoming ---
[u'const cv.javaDescriptorExtractor.BRISK', u'5', [], []]
ok: CONST BRISK=5

--- Incoming ---
[u'const cv.javaDescriptorExtractor.FREAK', u'6', [], []]
ok: CONST FREAK=6

--- Incoming ---
[u'const cv.javaDescriptorExtractor.AKAZE', u'7', [], []]
ok: CONST AKAZE=7

--- Incoming ---
[u'const cv.javaDescriptorExtractor.OPPONENTEXTRACTOR', u'1000', [], []]
ok: CONST OPPONENTEXTRACTOR=1000

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_SIFT',
    u'OPPONENTEXTRACTOR + SIFT',
    [],
    []]
ok: CONST OPPONENT_SIFT=OPPONENTEXTRACTOR + SIFT

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_SURF',
    u'OPPONENTEXTRACTOR + SURF',
    [],
    []]
ok: CONST OPPONENT_SURF=OPPONENTEXTRACTOR + SURF

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_ORB',
    u'OPPONENTEXTRACTOR + ORB',
    [],
    []]
ok: CONST OPPONENT_ORB=OPPONENTEXTRACTOR + ORB

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_BRIEF',
    u'OPPONENTEXTRACTOR + BRIEF',
    [],
    []]
ok: CONST OPPONENT_BRIEF=OPPONENTEXTRACTOR + BRIEF

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_BRISK',
    u'OPPONENTEXTRACTOR + BRISK',
    [],
    []]
ok: CONST OPPONENT_BRISK=OPPONENTEXTRACTOR + BRISK

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_FREAK',
    u'OPPONENTEXTRACTOR + FREAK',
    [],
    []]
ok: CONST OPPONENT_FREAK=OPPONENTEXTRACTOR + FREAK

--- Incoming ---
[   u'const cv.javaDescriptorExtractor.OPPONENT_AKAZE',
    u'OPPONENTEXTRACTOR + AKAZE',
    [],
    []]
ok: CONST OPPONENT_AKAZE=OPPONENTEXTRACTOR + AKAZE

--- Incoming ---
[   u'cv.javaDescriptorExtractor.create',
    u'javaDescriptorExtractor*',
    ['/S'],
    [[u'int', u'extractorType', u'', []]],
    u'javaDescriptorExtractor*']
ok: FUNC <javaDescriptorExtractor* cv.javaDescriptorExtractor.create [ARG int extractorType=]>

--- Incoming ---
[   u'cv.javaDescriptorExtractor.write',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorExtractor.write [ARG String fileName=]>

--- Incoming ---
[   u'cv.javaDescriptorExtractor.read',
    u'void',
    [],
    [[u'String', u'fileName', u'', []]],
    u'void']
ok: FUNC <void cv.javaDescriptorExtractor.read [ARG String fileName=]>

--- Incoming ---
[u'const cv.DRAW_OVER_OUTIMG', u'1', [], []]
ok: CONST DRAW_OVER_OUTIMG=1

--- Incoming ---
[u'const cv.NOT_DRAW_SINGLE_POINTS', u'2', [], []]
ok: CONST NOT_DRAW_SINGLE_POINTS=2

--- Incoming ---
[u'const cv.DRAW_RICH_KEYPOINTS', u'4', [], []]
ok: CONST DRAW_RICH_KEYPOINTS=4

--- Incoming ---
[   u'cv.drawKeypoints',
    u'void',
    [],
    [   [u'Mat', u'image', u'', []],
        [u'vector_KeyPoint', u'keypoints', u'', []],
        [u'Mat', u'outImage', u'', []],
        [u'Scalar', u'color', u'Scalar::all(-1)', []],
        [u'int', u'flags', u'0', []]],
    u'void']
ok: FUNC <void cv..drawKeypoints [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat outImage=, ARG Scalar color=Scalar::all(-1), ARG int flags=0]>

--- Incoming ---
[   u'cv.drawMatches',
    u'void',
    [],
    [   [u'Mat', u'img1', u'', []],
        [u'vector_KeyPoint', u'keypoints1', u'', []],
        [u'Mat', u'img2', u'', []],
        [u'vector_KeyPoint', u'keypoints2', u'', []],
        [u'vector_DMatch', u'matches1to2', u'', []],
        [u'Mat', u'outImg', u'', []],
        [u'Scalar', u'matchColor', u'Scalar::all(-1)', []],
        [u'Scalar', u'singlePointColor', u'Scalar::all(-1)', []],
        [u'vector_char', u'matchesMask', u'std::vector<char>()', []],
        [u'int', u'flags', u'0', []]],
    u'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG int flags=0]>

--- Incoming ---
[   u'cv.drawMatches',
    u'void',
    [u'=drawMatches2'],
    [   [u'Mat', u'img1', u'', []],
        [u'vector_KeyPoint', u'keypoints1', u'', []],
        [u'Mat', u'img2', u'', []],
        [u'vector_KeyPoint', u'keypoints2', u'', []],
        [u'vector_vector_DMatch', u'matches1to2', u'', []],
        [u'Mat', u'outImg', u'', []],
        [u'Scalar', u'matchColor', u'Scalar::all(-1)', []],
        [u'Scalar', u'singlePointColor', u'Scalar::all(-1)', []],
        [   u'vector_vector_char',
            u'matchesMask',
            u'std::vector<std::vector<char> >()',
            []],
        [u'int', u'flags', u'0', []]],
    u'void']
ok: FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG int flags=0]>


===== Generating... =====
CLASS cv..javaDescriptorExtractor : 
[CONST OPPONENTEXTRACTOR=1000]
[CONST SIFT=1, CONST SURF=2, CONST ORB=3, CONST BRIEF=4, CONST BRISK=5, CONST FREAK=6, CONST AKAZE=7, CONST OPPONENT_SIFT=OPPONENTEXTRACTOR + SIFT, CONST OPPONENT_SURF=OPPONENTEXTRACTOR + SURF, CONST OPPONENT_ORB=OPPONENTEXTRACTOR + ORB, CONST OPPONENT_BRIEF=OPPONENTEXTRACTOR + BRIEF, CONST OPPONENT_BRISK=OPPONENTEXTRACTOR + BRISK, CONST OPPONENT_FREAK=OPPONENTEXTRACTOR + FREAK, CONST OPPONENT_AKAZE=OPPONENTEXTRACTOR + AKAZE]
FUNC <void cv.javaDescriptorExtractor.compute [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat descriptors=]>
FUNC <void cv.javaDescriptorExtractor.compute [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat descriptors=]>
FUNC <int cv.javaDescriptorExtractor.descriptorSize []>
FUNC <int cv.javaDescriptorExtractor.descriptorType []>
FUNC <bool cv.javaDescriptorExtractor.empty []>
FUNC <javaDescriptorExtractor* cv.javaDescriptorExtractor.create [ARG int extractorType=]>
FUNC <void cv.javaDescriptorExtractor.write [ARG String fileName=]>
FUNC <void cv.javaDescriptorExtractor.read [ARG String fileName=]>
CLASS ..Features2d : 
[CONST DRAW_OVER_OUTIMG=1, CONST NOT_DRAW_SINGLE_POINTS=2, CONST DRAW_RICH_KEYPOINTS=4]
FUNC <void cv..drawKeypoints [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat outImage=, ARG Scalar color=Scalar::all(-1), ARG int flags=0]>
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_char matchesMask=std::vector<char>(), ARG int flags=0]>
FUNC <void cv..drawMatches [ARG Mat img1=, ARG vector_KeyPoint keypoints1=, ARG Mat img2=, ARG vector_KeyPoint keypoints2=, ARG vector_vector_DMatch matches1to2=, ARG Mat outImg=, ARG Scalar matchColor=Scalar::all(-1), ARG Scalar singlePointColor=Scalar::all(-1), ARG vector_vector_char matchesMask=std::vector<std::vector<char> >(), ARG int flags=0]>
CLASS cv..javaDescriptorMatcher : 
[CONST FLANNBASED=1, CONST BRUTEFORCE=2, CONST BRUTEFORCE_L1=3, CONST BRUTEFORCE_HAMMING=4, CONST BRUTEFORCE_HAMMINGLUT=5, CONST BRUTEFORCE_SL2=6]
FUNC <bool cv.javaDescriptorMatcher.isMaskSupported []>
FUNC <void cv.javaDescriptorMatcher.add [ARG vector_Mat descriptors=]>
FUNC <vector_Mat cv.javaDescriptorMatcher.getTrainDescriptors []>
FUNC <void cv.javaDescriptorMatcher.clear []>
FUNC <bool cv.javaDescriptorMatcher.empty []>
FUNC <void cv.javaDescriptorMatcher.train []>
FUNC <void cv.javaDescriptorMatcher.match [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_DMatch matches=, ARG Mat mask=Mat()]>
FUNC <void cv.javaDescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG Mat mask=Mat(), ARG bool compactResult=false]>
FUNC <void cv.javaDescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG Mat trainDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG Mat mask=Mat(), ARG bool compactResult=false]>
FUNC <void cv.javaDescriptorMatcher.match [ARG Mat queryDescriptors=, ARG vector_DMatch matches=, ARG vector_Mat masks=std::vector<Mat>()]>
FUNC <void cv.javaDescriptorMatcher.knnMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG int k=, ARG vector_Mat masks=std::vector<Mat>(), ARG bool compactResult=false]>
FUNC <void cv.javaDescriptorMatcher.radiusMatch [ARG Mat queryDescriptors=, ARG vector_vector_DMatch matches=, ARG float maxDistance=, ARG vector_Mat masks=std::vector<Mat>(), ARG bool compactResult=false]>
FUNC <javaDescriptorMatcher* cv.javaDescriptorMatcher.jclone [ARG bool emptyTrainData=false]>
FUNC <javaDescriptorMatcher* cv.javaDescriptorMatcher.create [ARG int matcherType=]>
FUNC <void cv.javaDescriptorMatcher.write [ARG String fileName=]>
FUNC <void cv.javaDescriptorMatcher.read [ARG String fileName=]>
CLASS cv..javaFeatureDetector : 
[CONST GRIDDETECTOR=1000, CONST PYRAMIDDETECTOR=2000, CONST DYNAMICDETECTOR=3000]
[CONST FAST=1, CONST STAR=2, CONST SIFT=3, CONST SURF=4, CONST ORB=5, CONST MSER=6, CONST GFTT=7, CONST HARRIS=8, CONST SIMPLEBLOB=9, CONST DENSE=10, CONST BRISK=11, CONST AKAZE=12, CONST GRID_FAST=GRIDDETECTOR + FAST, CONST GRID_STAR=GRIDDETECTOR + STAR, CONST GRID_SIFT=GRIDDETECTOR + SIFT, CONST GRID_SURF=GRIDDETECTOR + SURF, CONST GRID_ORB=GRIDDETECTOR + ORB, CONST GRID_MSER=GRIDDETECTOR + MSER, CONST GRID_GFTT=GRIDDETECTOR + GFTT, CONST GRID_HARRIS=GRIDDETECTOR + HARRIS, CONST GRID_SIMPLEBLOB=GRIDDETECTOR + SIMPLEBLOB, CONST GRID_DENSE=GRIDDETECTOR + DENSE, CONST GRID_BRISK=GRIDDETECTOR + BRISK, CONST GRID_AKAZE=GRIDDETECTOR + AKAZE, CONST PYRAMID_FAST=PYRAMIDDETECTOR + FAST, CONST PYRAMID_STAR=PYRAMIDDETECTOR + STAR, CONST PYRAMID_SIFT=PYRAMIDDETECTOR + SIFT, CONST PYRAMID_SURF=PYRAMIDDETECTOR + SURF, CONST PYRAMID_ORB=PYRAMIDDETECTOR + ORB, CONST PYRAMID_MSER=PYRAMIDDETECTOR + MSER, CONST PYRAMID_GFTT=PYRAMIDDETECTOR + GFTT, CONST PYRAMID_HARRIS=PYRAMIDDETECTOR + HARRIS, CONST PYRAMID_SIMPLEBLOB=PYRAMIDDETECTOR + SIMPLEBLOB, CONST PYRAMID_DENSE=PYRAMIDDETECTOR + DENSE, CONST PYRAMID_BRISK=PYRAMIDDETECTOR + BRISK, CONST PYRAMID_AKAZE=PYRAMIDDETECTOR + AKAZE, CONST DYNAMIC_FAST=DYNAMICDETECTOR + FAST, CONST DYNAMIC_STAR=DYNAMICDETECTOR + STAR, CONST DYNAMIC_SIFT=DYNAMICDETECTOR + SIFT, CONST DYNAMIC_SURF=DYNAMICDETECTOR + SURF, CONST DYNAMIC_ORB=DYNAMICDETECTOR + ORB, CONST DYNAMIC_MSER=DYNAMICDETECTOR + MSER, CONST DYNAMIC_GFTT=DYNAMICDETECTOR + GFTT, CONST DYNAMIC_HARRIS=DYNAMICDETECTOR + HARRIS, CONST DYNAMIC_SIMPLEBLOB=DYNAMICDETECTOR + SIMPLEBLOB, CONST DYNAMIC_DENSE=DYNAMICDETECTOR + DENSE, CONST DYNAMIC_BRISK=DYNAMICDETECTOR + BRISK, CONST DYNAMIC_AKAZE=DYNAMICDETECTOR + AKAZE]
FUNC <void cv.javaFeatureDetector.detect [ARG Mat image=, ARG vector_KeyPoint keypoints=, ARG Mat mask=Mat()]>
FUNC <void cv.javaFeatureDetector.detect [ARG vector_Mat images=, ARG vector_vector_KeyPoint keypoints=, ARG vector_Mat masks=std::vector<Mat>()]>
FUNC <bool cv.javaFeatureDetector.empty []>
FUNC <javaFeatureDetector* cv.javaFeatureDetector.create [ARG int detectorType=]>
FUNC <void cv.javaFeatureDetector.write [ARG String fileName=]>
FUNC <void cv.javaFeatureDetector.read [ARG String fileName=]>
